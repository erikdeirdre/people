# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: "python:3.8"

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

stages:
  - test

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

before_script:
  - python -V  # Print out python version for debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  - pip install -r test_requirements.txt

lint:
  stage: test
  script:
    - pip install flake8  # you can also use tox
    - flake8 . --exit-zero

pytest:
  stage: test
  variables:
    CONFIG_SETTINGS: config.TestConfig
  script:
    - cp config-sample.py config.py
    - coverage run -m pytest --junitxml=test-results.xml
    - coverage report
    - coverage xml -o coverage.xml
    - coverage html
#    - python-codacy-coverage -r coverage.xml
  artifacts:
    when: always
    reports:
      junit: test-results.xml
      cobertura: coverage.xml
    expire_in: 1 month

sonarcloud-check:
  stage: test
  before_script: 
    - ''
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  only:
    - merge_requests
    - master

#build_image:
#  image: docker:19.03.12
#  before_script:
#    - ''                  #ignore global_before script
#  state: image
#  services:
#    - docker:19.03.12-dind
#  variables:
#    IMAGE_TAG: 
